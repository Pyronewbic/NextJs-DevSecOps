apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: "{{ .Values.name }}"
  name: "{{ .Values.name }}"
  namespace: "{{ .Values.namespace }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.name }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
    spec:
      serviceAccountName: "{{ .Values.sa }}"
      securityContext:
        runAsUser: {{ .Values.deployment.user }}
        rule: "MustRunAsNonRoot"
      containers:
      - image: {{ .Values.deployment.image }}:{{ .Values.deployment.tag }}
        imagePullPolicy: Always
        name: "{{ .Values.name }}"
        ports:
        - containerPort: {{ .Values.ports.targetPort }}
          protocol: TCP
        envFrom:
        - configMapRef:
            name: {{ .Values.config.configmap }}
        - secretRef:
            name: {{ .Values.config.secret }}
        resources:
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
          limits:
            cpu: {{ .Values.resources.limits.cpu }}
            memory: {{ .Values.resources.limits.memory }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}
